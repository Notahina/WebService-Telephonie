CREATE DATABASE TELEPHONIE;
CREATE USER ETU with password '1234';
GRANT CONNECT ON DATABASE  TELEPHONIE TO ETU;
ALTER DATABASE TELEPHONIE OWNER TO ETU;
CREATE ROLE EtuRole;
ALTER ROLE EtuRole SUPERUSER;
GRANT EtuRole TO ETU;

psql -U etu -d telephonie
------------------------------------------------------

CREATE TABLE ConsommationOffre(
	idcons int,
	iduser int,
	idoffre varchar(20),
	types int , --0 appel 1 internet -2 sms
	quantite double precision
);

CREATE TABLE offre (
	idoffre varchar(20) PRIMARY KEY,
	NOM_OFFRE varchar(50),
	VALIDITE int,
	prix double precision
);
CREATE TABLE VALEUR(
	id varchar(20),
	idoffre varchar(20),
	nom varchar(50),
	quantite double precision,
	unite varchar(20)
);
CREATE   Table AchatOffre(
	id varchar(20) PRIMARY KEY,
	iduser int,
	idoffre varchar(20),
	datedebut date,
	datefin   date,
	FOREIGN KEY (idoffre) REFERENCES offre(idoffre)  
);
 INSERT INTO ConsommationOffre VALUES (1,1,'O1',0,200);
INSERT INTO AchatOffre VALUES ('AO1',1,'O1','2021-03-11','2021-03-12');
INSERT INTO AchatOffre VALUES ('AO2',1,'O2','2021-03-11','2021-03-12');

INSERT INTO offre VALUES ('O1','Mora',1,500);
INSERT INTO offre VALUES ('O2','FIRST',30,10000);
INSERT INTO offre VALUES ('O3','Mora One',1,500);

INSERT INTO VALEUR VALUES ('V1','O1','Appel',150,'s');
INSERT INTO VALEUR VALUES ('V2','O1','Internet',50,'mo');
INSERT INTO VALEUR VALUES ('V3','O2','Appel',1500,'s');
INSERT INTO VALEUR VALUES ('V4','O2','Internet',150,'mo');

-------------------------DROP---------------------
DROP table Token CASCADe
--------------------------------------------SEQUENCE---------------------------------
CREATE SEQUENCE IF NOT EXISTS user_seq START 1;
CREATE SEQUENCE IF NOT EXISTS money_seq START 10;
CREATE SEQUENCE IF NOT EXISTS user_seq START 1;
---------------------------------------------POSTGRES------------------------------
CREATE VIEW MONEYNONVALIDE as 
	SELECT m.ID_MOUVEMENT,u.ID_UTILISATEUR,m.TYPES,u.TELEPHONE,m.DATE_TRANSACTION,m.MONTANT,m.ETAT
	FROM UTILISATEUR u join MONEY_MOUVEMENT m on u.ID_UTILISATEUR =m.ID_UTILISATEUR 
	where m.TYPES=1 and etat=0;
CREATE TABLE UTILISATEUR 
(
	ID_UTILISATEUR INT PRIMARY KEY,
	NOM VARCHAR(30),
	PRENOM VARCHAR(30),
	LOGIN VARCHAR(30),
	TELEPHONE VARCHAR(15),
	MDP VARCHAR(100),
	Types varchar(30)
);
CREATE TABLE IF NOT EXISTS Token(
	ID_TOKEN varchar(150) PRIMARY KEY,
	ID_UTILISATEUR int,
	DATE_EXPIRATION timestamp,
	FOREIGN KEY (ID_UTILISATEUR) REFERENCES UTILISATEUR(ID_UTILISATEUR)
);
CREATE TABLE IF NOT EXISTS Offre(
	ID_OFFRE int  PRIMARY KEY,
	NOM_OFFRE varchar(50),
	DATE_OFFRE date,
	VALIDITE int,
	prix double precision
);
CREATE TABLE IF NOT EXISTS TAUX_OFFRE
(
	ID_TAUX INT,
	ID_OFFRE INT,
	VALEUR DOUBLE precision,
	SPECIFICATION VARCHAR(30),
	FOREIGN KEY (ID_OFFRE) REFERENCES Offre(ID_OFFRE)
);
CREATE TABLE IF NOT EXISTS OFFRE_MOUVEMENT(
	ID_MOUVEMENT int  PRIMARY KEY,
	ID_OFFRE int,
	VALEUR_OFFRE double precision,
	ID_UTILISATEUR int,
	TYPE_MOUVEMENT int,
	DATE_MOUVEMENT timestamp,
	FOREIGN KEY (ID_OFFRE) REFERENCES Offre(ID_OFFRE),
	FOREIGN KEY (ID_UTILISATEUR) REFERENCES UTILISATEUR(ID_UTILISATEUR)
);

--OFFRE VALIDE
CREATE OR REPLACE VIEW OFFRE_VALIDE AS SELECT OFFRE_MOUVEMENT.* 
FROM OFFRE,OFFRE_MOUVEMENT 
WHERE OFFRE_MOUVEMENT.ID_OFFRE=OFFRE.ID_OFFRE 
AND (OFFRE_MOUVEMENT.DATE_MOUVEMENT::timestamp+ OFFRE.VALIDITE*interval '24 HOUR')>=NOW();

--STATISTIQUES
--OFFRE LE PLSU ACHETER
SELECT sum(VALEUR_OFFRE),idoffre from OFFRE_MOUVEMENT group by ID_OFFRE;
--VALEUR OFFRE JOUR
CREATE OR REPLACE VIEW STATISTIQUE_OFFRE_JOUR AS select
    date_trunc('DAY', OFFRE_MOUVEMENT.DATE_MOUVEMENT::timestamp) as DATES,
    SUM(OFFRE_MOUVEMENT.VALEUR_OFFRE) as VALEUR,
    OFFRE.ID_OFFRE,
	OFFRE.NOM_OFFRE
	FROM OFFRE_MOUVEMENT,OFFRE
	WHERE 
	OFFRE_MOUVEMENT.ID_OFFRE=OFFRE.ID_OFFRE
	AND OFFRE_MOUVEMENT.TYPE_MOUVEMENT=1
	group by 1,OFFRE.ID_OFFRE;

---------------------------------------------------
select date_trunc('DAY', OFFRE_MOUVEMENT.DATE_MOUVEMENT::timestamp) as DATES,
    SUM(OFFRE_MOUVEMENT.VALEUR_OFFRE) as VALEUR
	FROM OFFRE_MOUVEMENT,OFFRE
	WHERE 
	OFFRE_MOUVEMENT.ID_OFFRE=OFFRE.ID_OFFRE
	AND OFFRE_MOUVEMENT.TYPE_MOUVEMENT=1
	group by 1;
---------------------------------------------------

--VALEUR OFFRE SEMAINE
CREATE OR REPLACE VIEW STATISTIQUE_OFFRE_SEMAINE AS select
    date_trunc('week', OFFRE_MOUVEMENT.DATE_MOUVEMENT::timestamp) as DATES,
    SUM(OFFRE_MOUVEMENT.VALEUR_OFFRE) as VALEUR,
    OFFRE.ID_OFFRE,
    OFFRE.NOM_OFFRE
from OFFRE_MOUVEMENT,OFFRE
WHERE 
OFFRE_MOUVEMENT.ID_OFFRE=OFFRE.ID_OFFRE
AND OFFRE_MOUVEMENT.TYPE_MOUVEMENT=1
group by 1,OFFRE.ID_OFFRE;


--VALEUR OFFRE MOIS
CREATE OR REPLACE VIEW STATISTIQUE_OFFRE_MOIS AS select
    date_trunc('month', OFFRE_MOUVEMENT.DATE_MOUVEMENT::timestamp) as DATES,
    SUM(OFFRE_MOUVEMENT.VALEUR_OFFRE) as VALEUR,
    OFFRE.ID_OFFRE,
    OFFRE.NOM_OFFRE
from OFFRE_MOUVEMENT,OFFRE
WHERE 
OFFRE_MOUVEMENT.ID_OFFRE=OFFRE.ID_OFFRE
AND OFFRE_MOUVEMENT.TYPE_MOUVEMENT=1
group by 1,OFFRE.ID_OFFRE;


CREATE TABLE IF NOT EXISTS AchatOffre(
	ID_ACHAT int  PRIMARY KEY,
	ID_OFFRE int,
	ID_UTILISATEUR int,
	TYPES_ACHAT varchar(50),
	DATE_ACHAT timestamp,
	FOREIGN KEY (ID_OFFRE) REFERENCES Offre(ID_OFFRE),
	FOREIGN KEY (ID_UTILISATEUR) REFERENCES UTILISATEUR(ID_UTILISATEUR)
);
CREATE TABLE IF NOT EXISTS MONEY_MOUVEMENT(
	ID_MOUVEMENT int PRIMARY KEY,
	ID_UTILISATEUR int,
	TYPES int,
	MONTANT double precision,
	DATE_TRANSACTION timestamp,
	ETAT int,
	FOREIGN KEY (ID_UTILISATEUR) REFERENCES UTILISATEUR(ID_UTILISATEUR)
);
CREATE TABLE IF NOT EXISTS CREDIT(
	ID_CREDIT int ,
	CODE varchar(15) unique,
	DATE_EXPIRATION date
);
--MOBILE MONEY
CREATE TABLE IF NOT EXISTS MONEY_MOUVEMENT(
	ID_MOUVEMENT int PRIMARY KEY,
	ID_UTILISATEUR int,
	TYPES int,
	MONTANT double precision,
	DATE_TRANSACTION timestamp,
	ETAT int,
	FOREIGN KEY (ID_UTILISATEUR) REFERENCES UTILISATEUR(ID_UTILISATEUR)
);

CREATE TABLE IF NOT EXISTS CREDIT_MOUVEMENT(
	ID_CREDIT int,
	ID_UTILISATEUR int,
	TYPES varchar(30),
	MONTANT double precision,
	DATE_MOUVEMENT timestamp
);
CREATE TABLE IF NOT EXISTS APPEL(
	ID_APPEL int,
	TYPES varchar(20),
	NUMERO1 varchar(15),
	NUMERO2 varchar(15),
	DUREE int,
	DATE_APPEL timestamp
);